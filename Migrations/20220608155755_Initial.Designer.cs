// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchedulerWebApplication;

namespace SchedulerWebApplication.Migrations
{
    [DbContext(typeof(SchedulerContext))]
    [Migration("20220608155755_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchedulerWebApplication.Models.Executor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.ExecutorStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.ToTable("ExecutorStatuses");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FlowTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowTaskId")
                        .IsUnique()
                        .HasFilter("[FlowTaskId] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("Flows");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<long>("RunDate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowRuns");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnvironmentVariables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("FlowTasks");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FlowRunId")
                        .HasColumnType("int");

                    b.Property<int>("FlowTaskId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowRunId");

                    b.HasIndex("FlowTaskId");

                    b.ToTable("FlowTaskStatuses");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.LocalAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("LocalAccounts");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.MicrosoftAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("MicrosoftAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("MicrosoftAccounts");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.StartingUp", b =>
                {
                    b.Property<int>("PredecessorId")
                        .HasColumnType("int");

                    b.Property<int>("SuccessorId")
                        .HasColumnType("int");

                    b.HasKey("PredecessorId", "SuccessorId");

                    b.HasIndex("SuccessorId");

                    b.ToTable("StartingUps");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DefaultEnvironmentVariables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OutputType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Executor", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Person", "Person")
                        .WithMany("Executors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.ExecutorStatus", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Executor", null)
                        .WithMany("Statuses")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Flow", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.FlowTask", "FlowTask")
                        .WithOne("Flow")
                        .HasForeignKey("SchedulerWebApplication.Models.Flow", "FlowTaskId");

                    b.HasOne("SchedulerWebApplication.Models.Person", "Person")
                        .WithMany("Flows")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowTask");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowRun", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Executor", "Executor")
                        .WithMany("FlowRuns")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerWebApplication.Models.Flow", "Flow")
                        .WithMany("FlowRuns")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowTask", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Task", "Task")
                        .WithMany("FlowTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowTaskStatus", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.FlowRun", null)
                        .WithMany("Statuses")
                        .HasForeignKey("FlowRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchedulerWebApplication.Models.FlowTask", null)
                        .WithMany()
                        .HasForeignKey("FlowTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.LocalAccount", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.MicrosoftAccount", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.StartingUp", b =>
                {
                    b.HasOne("SchedulerWebApplication.Models.FlowTask", "Predecessor")
                        .WithMany("Successors")
                        .HasForeignKey("PredecessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchedulerWebApplication.Models.FlowTask", "Successor")
                        .WithMany("Predecessors")
                        .HasForeignKey("SuccessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Predecessor");

                    b.Navigation("Successor");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Executor", b =>
                {
                    b.Navigation("FlowRuns");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Flow", b =>
                {
                    b.Navigation("FlowRuns");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowRun", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.FlowTask", b =>
                {
                    b.Navigation("Flow");

                    b.Navigation("Predecessors");

                    b.Navigation("Successors");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Person", b =>
                {
                    b.Navigation("Executors");

                    b.Navigation("Flows");
                });

            modelBuilder.Entity("SchedulerWebApplication.Models.Task", b =>
                {
                    b.Navigation("FlowTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
